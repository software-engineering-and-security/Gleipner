withAllJdk = false
# Use rt.jar, jce.jar and ext/nashron.jar by default
basicClassesLoad = inPuts/config/basicClasses
  # inPuts/config/basicClasses
# The path should be end with '/'
inputPath = testExample/Gleipner

configPath = inPuts/config

# Time limit for running (minutes) / null: no limit
executionTimeLimit = 60
# Soot cannot parse some classes.
# Solution 1: When such classes are encountered, JDD automatically captures them and adds them in the ignoreInfo file.
# It then attempts to re-execute the process.
# This configuration item sets a limit on the number of re-execution attempts.
# Solution 2: Remove unparsable files directly from the target analysis directory
# Currently, JDD takes both strategies
reRunLimitNum = 10

# from an exist exploit to derive unknown gadget chains
inputEXPInfosPath = removed
ignoreListPath = inPuts/config/ignoreInfo

prioritizedGadgetChainLimit = 500
# Output directory
outputDir = outputs
accessPath_limit = 3
fragmentLenLimit = 6
# If a dynamic method call overrides no more than methodLimitNum, no fragments are generated. (Modifiable)
methodLimitNum = 5
# true / false
needSerializable = true

# Protocol Selection
# hessian, jdk, json
protocol = jdk
# getter, setter, is, staticCommon, OverWrittenInterfaceMtd
jsonSourceType = getter,staticCommon,is
taintRuleMode = strict
outPutDirName = Groovy
# loose: gadget chains
linkMode = strict
# If store gadget in MySQL or not (removed)
storeInDataBase = false
derivationType = All
# If the protocol is JDK, you can set it to true.
# After a recent refactoring, this feature is currently unstable and has not been released yet. Fixes are in progress.
openDynamicProxy = false
stackLenLimitNum = 18
heuristicShortChainCutLen = 2
serializableInterceptLen = 3
# invoke, jndi, exec, file, jndi,secondDes,custom, classLoad
sinkRules = exec
# Configurations (files) not recommended for modification: ignoreListPath, accessPath_limit