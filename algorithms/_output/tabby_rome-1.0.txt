[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: void readObject(java.io.ObjectInputStream)>
]

[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: void <init>(java.lang.String)>
<java.net.URL: java.net.URL fabricateNewURL()>
<java.net.URL: java.lang.Object readResolve()>
]

[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: java.lang.Object readResolve()>
]

[
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<jdk.internal.reflect.ReflectionFactory: java.lang.reflect.Method findMethodForReflection(java.lang.reflect.Method)>
<jdk.internal.reflect.ReflectionFactory: jdk.internal.reflect.MethodAccessor newMethodAccessor(java.lang.reflect.Method)>
<java.lang.reflect.Method: jdk.internal.reflect.MethodAccessor acquireMethodAccessor()>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.invoke.SerializedLambda: java.lang.Object readResolve()>
]

[
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.invoke.SerializedLambda: java.lang.Object readResolve()>
]

[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: void readObject(java.io.ObjectInputStream)>
]

[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: java.lang.Object readResolve()>
]

[
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.net.URL: void <init>(java.lang.String)>
<java.net.URL: java.net.URL fabricateNewURL()>
<java.net.URL: java.lang.Object readResolve()>
]

